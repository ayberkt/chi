rec eval = \e.
  (\nateq. (\map.
     (\subst. \substMulti. \lookup.
        case e of
          { Lambda(m, e) -> Lambda(m, e)
          ; Apply(e1, e2) ->
              case eval e1 of { Lambda (m, e) -> eval (subst m e (eval e2)) }
          ; Case(e, bs) ->
              case eval e of
                { Const(c, vs) ->
                    case lookup c bs of
                      { Pair(xs, e') -> eval (substMulti subst xs e' vs)
                      }
                }
          ; Rec (x, e) -> eval (subst x e Rec(x, e))
          ; Var(x) -> Var(x)
          ; Const(c, es) -> Const(c, map eval es)
          })
    (rec subst = \m. \e. \e'.
       (\mem.
          case e of
            { Var(n) ->
                case nateq m n of
                  { True()  -> e'
                  ; False() -> Var(n)
                  }
            ; Apply(e1, e2) -> Apply(subst m e1 e', subst m e2 e')
            ; Lambda(n, e1) ->
                case nateq m n of
                  { True()  -> Lambda(n, e1)
                  ; False() -> Lambda(n, subst m e1 e')
                  }
            ; Case(e1, bs) -> Case (subst m e1 e', map (\br. subst m br e') bs)
            ; Rec(n, e1) ->
                case nateq m n of
                  { True () -> Rec(n, e1)
                  ; False() -> Rec(n, subst m e1 e')
                  }
            ; Const(c, es) -> Const(c, map (\e0. subst m e0 e') es)
            ; Branch(c, ms, e) ->
                case mem m ms of
                  { True()  -> Branch(c, ms, e)
                  ; False() -> Branch(c, ms, subst m e e')
                  }
            })
         (rec mem = \m. \ms.
            case ms of
              { Nil() -> False()
              ; Cons(m', ms) ->
                  case nateq m m' of { True() -> True() ; False() -> mem m ms }
             }))
    (rec substMulti = \subst. \xs. \e. \es.
       case xs of
         { Nil() -> case es of { Nil() -> e }
         ; Cons(x, xs) ->
             case es of
               { Cons(e', es) -> substMulti subst xs (subst x e e') es }
         })
    (rec lookup = \c. \bs.
       case bs of
         { Cons(b, bs') ->
             case b of
               { Branch(c', xs, e') ->
                   case nateq c c' of
                     { True() -> Pair(xs, e')
                     ; False() -> lookup c bs'
                     }
               }
         }))
    (rec map = \f. \ms.
       case ms of { Nil() -> Nil() ; Cons(m, ms) -> Cons(f m, map f ms) }))
    (rec nateq = \m. \n.
       case m of
         { Zero() -> case n of { Zero() -> True()  ; Suc(n) -> False()   }
         ; Suc(m) -> case n of { Zero() -> False() ; Suc(n) -> nateq m n }
         })
